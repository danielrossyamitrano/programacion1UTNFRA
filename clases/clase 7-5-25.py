# 7) Crea una funci칩n que verifique si un n칰mero dado es par o impar. La funci칩n retorna True si el n칰mero es par,
# False en caso contrario.
def es_par_bool(num: int) -> bool:
    """Devuelve True o False dependiendo de la paridad del n칰mero"""
    if es_int(num):
        if num % 2 == 0:
            return True
        else:
            return False
    else:
        print('El n칰mero ingresado es inv치lido.')


# 8) Define una funci칩n que encuentre el m치ximo de tres n칰meros. La funci칩n debe aceptar tres argumentos y devolver
# el n칰mero m치s grande.
def maxim(num1: int, num2: int, num3: int) -> int:
    """Encuentra el m치ximo numero dentro de tres numeros"""
    max_num = float("-inf")
    if es_int(num1) and es_int(num2) and es_int(num3):
        for num in [num1, num2, num3]:
            if num > max_num:
                max_num = num
        return max_num
    else:
        print('Los n칰meros ingresados son inv치lidos')


# 9) Dise침a una funci칩n que calcule la potencia de un n칰mero. La funci칩n debe recibir la base y el exponente como
# argumentos y devolver el resultado.
def potencia(base: int, exponente: int) -> float:
    """Calcula la potencia de un numero por su exponente"""
    if es_int(base) and es_int(exponente):
        return base ** exponente
    else:
        print('Los n칰meros ingresados son inv치lidos')


# 10) Crear una funci칩n que reciba un n칰mero y retorne True si el n칰mero es primo, False en caso contrario.
def es_primo(numero: int) -> int:
    """Devuelve True o False si el n칰mero es primo"""
    primos = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
    # No se me ocurre otra forma de verificar que n칰mero sea primo si no es busc치ndolo en una lista de primos.
    if es_int(numero):
        return numero in primos
    else:
        print('El numero ingresado es inv치lido.')


# TAREA ADEMAS DE LOS EJERCICIOS :
# 游댳 Enunciado 1: Validar n칰mero decimal (float)
# Objetivo: Crear una funci칩n que valide si un valor recibido como par치metro (string o n칰mero) puede interpretarse como un n칰mero decimal.
def es_float(numero) -> bool:
    """Valida que el numero sea un flotante"""
    return type(numero) is float


def es_un_float(cadena: str) -> bool:
    """Valida que el string contenga una cadena v치lida para un float."""

    cadena = cadena.replace(',', '.')  # convierte las comas en puntos, por si el n칰mero ingresado es "espa침ol".
    test_1 = '.' in cadena  # verifica que haya un punto (coma) en el n칰mero.
    test_2 = ''.join(cadena.split('.')).isdigit()  # verifica que todos los "otros" caracteres sean d칤gitos.
    test_3 = '.' != cadena[-1]  # verifica que el punto no est칠 al final del string, como en una oraci칩n t칤pica.
    test_4 = cadena.count(".") == 1  # verifica que haya s칩lo un punto (coma) en el string.

    # Devuelve True si todas las pruebas son True. Tambi칠n podr칤a hacerse con all(test_1, ...)
    return test_1 and test_2 and test_3 and test_4


def es_un_float_master(numero_o_string) -> bool:
    if type(numero_o_string) is not str:
        return es_float(numero_o_string)
    else:
        return es_un_float(numero_o_string)


# Enunciado:
# Escrib칤 una funci칩n llamada es_float(valor) que reciba un solo par치metro. La funci칩n debe retornar True si el valor puede convertirse a float,
# ya sea que venga como string (por ejemplo, "3.14") o como n칰mero (3.14), y False en caso contrario.
# Prob치 tu funci칩n con distintos valores como "3.14", 3.14, "texto", "12", 12, y None.

# 游댳 Enunciado 2: Validar n칰mero entero (int)
# Objetivo: Crear una funci칩n que valide si un valor puede interpretarse como un n칰mero entero.


# Enunciado:
# Escrib칤 una funci칩n llamada es_entero(valor) que reciba un solo par치metro. La funci칩n debe retornar True si el valor puede convertirse a int,
# ya sea que venga como string ("5") o como n칰mero (5), y False en caso contrario.
# Prob치 tu funci칩n con valores como "5", 5, "5.0", 5.0, "cinco" y None.

def es_int(numero):
    """Valida que el numero sea un entero"""
    return type(numero) is int


def es_entero(numero_o_string) -> bool:
    test_int = type(numero_o_string) is int
    test_0 = type(numero_o_string) is str
    test_1 = test_0 and numero_o_string.digit()
    test_2 = es_un_float(numero_o_string)
    test_3 = test_0 and not (test_1 or test_2)
    test_4 = numero_o_string is not None
    if test_1 or test_2 or test_int:
        return True
    elif test_3 or test_4:
        return False


# 游댳 Enunciado 3: Validar si un valor es alfanum칠rico
# Objetivo: Crear una funci칩n que verifique si un string es estrictamente alfanum칠rico.

# Enunciado:
# Escrib칤 una funci칩n llamada es_alfanumerico(valor) que reciba un par치metro y devuelva True si es un string compuesto 칰nicamente
# por letras y/o n칰meros (sin espacios, s칤mbolos o acentos), y False en caso contrario.
# Prob치 la funci칩n con valores como "Hola123", "hola mundo", "123", "!!!", "" y None.

def es_alfanumerico(valor: str) -> bool:
    if type(valor) is str and valor.isalnum():
        return True
    else:
        return False
